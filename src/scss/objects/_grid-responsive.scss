/*
    Grids
    Refer to $gridBase to get the column sizes
    Refer to $mq for the breakpoints of the grid

    g1 => $screen-small
    g2 => $screen-medium
    g3 => $screen-large
    g4 => $screen-extralarge
    g5 => $screen-phone
    g6 => $screen-phablet
    g7 => $screen-tablet
    g8 => $screen-tablet-wide
    g9 => $screen-tablet-wider


    Output examples
    @include respond-to-min($screen-small) {
        .g-block { display: none !important; }
        .g1-block { display: block !important; }

        .g1-1of1 { width: 100%; }
        .g1-1of2 { width: 50%; }
        .g1 ...

        .g1-offset-1of2 { margin-left: 50%; }
        .g1-offset-2of3 { margin-left: 66.66666%; }
        .g1-offset ...
    }
*/

/* stylelint-disable rule-nested-empty-line-before */
/* List of grid bases */
$gridBase: (
    '1of1': 100%,
    '1of2': 50%,
    '1of3': 33.3333%,
    '2of3': 66.6666%,
    '1of4': 25%,
    '2of4': 50%,
    '3of4': 75%,
    '1of5': 20%,
    '2of5': 40%,
    '3of5': 60%,
    '4of5': 80%,
    '1of6': 16.6666%,
    '2of6': 33.3333%,
    '4of6': 66.6666%,
    '5of6': 83.3333%,
);

/// grid breakpoints
/// @type string
/// @group grid
$grid-breakpoints: $screen-small, $screen-medium, $screen-large,
    $screen-extralarge !default;

/* Grid generator */
@each $colName, $colSize in $gridBase {

    /* Grid outside media queries */
    .g-#{$colName} {
        width: $colSize;
    }

    /* Offsets */
    @if $colSize != '100%' {
        .g-offset-#{$colName} {
            margin-left: $colSize;
        }
    }

    /* Grid values at breakpoints */
    @for $i from 1 through length($grid-breakpoints) {
        @include respond-to-min(#{nth($grid-breakpoints, $i)}) {

            /* Grid inside media queries */
            .g#{$i}-#{$colName} {
                width: $colSize;
            }

            /* Offsets */
            @if $colSize != '100%' {
                .g#{$i}-offset-#{$colName} {
                    margin-left: $colSize;
                }
            }

            /* Clone variable to modify it inside loop */
            $j: $i;

            /* Looping to display: none of grid elements */
            @while $j >= 0 {
                @if $colName == '1of1' and $j != $i and $j != 0 {
                    .g#{$j}-block {
                        display: none !important;
                    }
                }
                @elseif $colName == '1of1' and $j == 0 {
                    .g-block {
                        display: none !important;
                    }
                }

                $j: $j - 1;
            }

            /* If condition is used to show this declaration only once */
            @if $colName == '1of1' {
                .g#{$i}-block {
                    display: block !important;
                }

                .g#{$i}-grid-reset {
                    width: auto;
                }
            }
        }
    }
}

/* # Grid Styles */
/* ## Clearfix Rows */

.row:before,
.row:after {
    content: ' ';
    display: table;
}

.row:after {
    clear: both;
}

.row {
    margin-left: -$spacing * 2;
    margin-right: -$spacing * 2;

    &.row-quarter {
        margin-left: -$spacing * 0.5;
        margin-right: -$spacing * 0.5;
    }

    &.row-double {
        margin-left: -$spacing * 4;
        margin-right: -$spacing * 4;
    }

    .footer & {
        margin-left: 0;
        margin-right: 0;
    }
}

/* ## Columns and Gutters */
.col {
    float: left;
    padding-left: $spacing * 2;
    padding-right: $spacing * 2;

    .row-quarter > & {
        padding-left: $spacing * 0.5;
        padding-right: $spacing * 0.5;
    }

    .footer & {
        padding-left: $spacing * 4;
        padding-right: $spacing * 4;
    }
}

.last-col {
    float: none;
    width: auto;
}
